name: Build DotIgnore CLI

on:
  push:
    tags:
      - 'v*'
      - '!plugin-v*'
    branches:
      - main
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/build.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/build.yml'

permissions:
  contents: write

jobs:
  test:
    name: Test CLI
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Run tests for CLI
        run: cargo test --features "cli"

  build:
    name: Build CLI for ${{ matrix.os }}
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
            name: windows_x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
            name: linux_x64
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
            name: macos_x64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""
            name: macos_arm64

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
           
      - name: Build CLI
        run: cargo build --release --features "cli" --target ${{ matrix.target }}
      
      - name: List files in release directory (Unix)
        if: runner.os != 'Windows'
        run: ls -la target/${{ matrix.target }}/release/
        
      - name: List files in release directory (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem -Path target/${{ matrix.target }}/release/
        
      - name: Prepare artifact directory
        run: mkdir -p artifacts
          
      - name: Copy artifact (Windows)
        if: runner.os == 'Windows'
        run: cp target/${{ matrix.target }}/release/ignore${{ matrix.suffix }} artifacts/ignore_${{ matrix.name }}${{ matrix.suffix }}
        
      - name: Copy artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/ignore${{ matrix.suffix }} artifacts/ignore_${{ matrix.name }}${{ matrix.suffix }}
          chmod +x artifacts/ignore_${{ matrix.name }}${{ matrix.suffix }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DotIgnore_cli_${{ matrix.name }}
          path: artifacts/ignore_${{ matrix.name }}${{ matrix.suffix }}
          
  release:
    name: Create CLI Release
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || (startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/tags/plugin-v')))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(grep -m 1 'version = ' Cargo.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
        
      - uses: actions/download-artifact@v4
        
      - name: Create checksums
        run: |
          for f in */*; do
            if [ -f "$f" ]; then
              sha256sum "$f" > "${f}.sha256"
            fi
          done
          
      - name: Debug - List downloaded artifacts
        run: |
          echo "Current directory structure:"
          find . -type f | sort
          
      - name: Generate release name
        id: release_name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="${{ steps.extract_version.outputs.version }}"
            echo "name=DotIgnore CLI v$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          else
            echo "name=DotIgnore CLI ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release_name.outputs.name }}
          tag_name: ${{ steps.release_name.outputs.tag_name }}
          files: |
            */ignore_*.exe
            */ignore_linux_x64
            */ignore_macos_x64
            */ignore_macos_arm64
            */ignore_*.sha256
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
